// Extensible error filters

'use strict';

var includes = require('es5-ext/string/#/contains');

module.exports = exports = function () {
	var context = this, args = arguments;
	return exports.filters.every(function (filter) { return filter.callback.apply(context, args); });
};

exports.filters = [{
	name: 'googleBot',
	callback: function (data) {
		return !includes.call(data.agent, 'Googlebot/');
	}
}, {
	name: 'googleApi',
	callback: function (data) {
		return (data.errorMessage !== 'google is not defined');
	}
}, {
	name: 'chrome32Null',
	callback: (function () {
		var failVersions = ['Chrome/32', 'Chrome/36'];
		return function (data) {
			if (failVersions.every(function (ver) { return !includes.call(data.agent, ver); })) {
				return true;
			}
			if (data.line) return true;
			if (data.source !== undefined) return true;
			return (data.message !== 'TypeError: \'null\' is not an object');
		};
	}())
}, {
	name: 'publicDbUpdate',
	callback: function (data) {
		if (this.req.$appName !== 'public') return true;
		if (data.errorMessage !== 'Rejecteded XHR request to "/dbupdate/": Not Found') return true;
	}
}];
